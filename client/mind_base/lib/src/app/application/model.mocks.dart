// Mocks generated by Mockito 5.3.2 from annotations
// in mind_base/src/app/application/model.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:appwrite/models.dart' as _i2;
import 'package:get_arch_core/get_arch_core.dart' as _i4;
import 'package:mind_base/src/app/application/model.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSession_0 extends _i1.SmartFake implements _i2.Session {
  _FakeSession_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccount_1 extends _i1.SmartFake implements _i2.Account {
  _FakeAccount_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserState_2 extends _i1.SmartFake implements _i3.UserState {
  _FakeUserState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeam_3 extends _i1.SmartFake implements _i2.Team {
  _FakeTeam_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_4 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeamState_5 extends _i1.SmartFake implements _i3.TeamState {
  _FakeTeamState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserModel extends _i1.Mock implements _i3.UserModel {
  @override
  _i2.Session get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeSession_0(
          this,
          Invocation.getter(#session),
        ),
        returnValueForMissingStub: _FakeSession_0(
          this,
          Invocation.getter(#session),
        ),
      ) as _i2.Session);
  @override
  _i2.Account get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: _FakeAccount_1(
          this,
          Invocation.getter(#data),
        ),
        returnValueForMissingStub: _FakeAccount_1(
          this,
          Invocation.getter(#data),
        ),
      ) as _i2.Account);
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get isAnonymous => (super.noSuchMethod(
        Invocation.getter(#isAnonymous),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i3.TeamModel> get teams => (super.noSuchMethod(
        Invocation.getter(#teams),
        returnValue: <_i3.TeamModel>[],
        returnValueForMissingStub: <_i3.TeamModel>[],
      ) as List<_i3.TeamModel>);
  @override
  _i3.UserState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeUserState_2(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeUserState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.UserState);
  @override
  set state(_i3.UserState? _state) => super.noSuchMethod(
        Invocation.setter(
          #state,
          _state,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get msg => (super.noSuchMethod(
        Invocation.getter(#msg),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set msg(String? _msg) => super.noSuchMethod(
        Invocation.setter(
          #msg,
          _msg,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.TeamModel? findTeam(String? teamId) => (super.noSuchMethod(
        Invocation.method(
          #findTeam,
          [teamId],
        ),
        returnValueForMissingStub: null,
      ) as _i3.TeamModel?);
  @override
  dynamic onActEntrance(_i3.UserAct? act) => super.noSuchMethod(
        Invocation.method(
          #onActEntrance,
          [act],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.BaseException? onBeforeActEntrance(_i3.UserAct? act) =>
      (super.noSuchMethod(
        Invocation.method(
          #onBeforeActEntrance,
          [act],
        ),
        returnValueForMissingStub: null,
      ) as _i4.BaseException?);
  @override
  _i5.Future<_i4.BaseException?> actWrapper([
    Function? action,
    int? traceLine = 1,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #actWrapper,
          [
            action,
            traceLine,
          ],
        ),
        returnValue: _i5.Future<_i4.BaseException?>.value(),
        returnValueForMissingStub: _i5.Future<_i4.BaseException?>.value(),
      ) as _i5.Future<_i4.BaseException?>);
  @override
  T? setState<T>(
    _i3.UserState? state,
    String? m, {
    T? Function()? before,
    int? traceLine = 2,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setState,
          [
            state,
            m,
          ],
          {
            #before: before,
            #traceLine: traceLine,
          },
        ),
        returnValueForMissingStub: null,
      ) as T?);
  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i4.BaseException?> actEntrance(_i3.UserAct? act) =>
      (super.noSuchMethod(
        Invocation.method(
          #actEntrance,
          [act],
        ),
        returnValue: _i5.Future<_i4.BaseException?>.value(),
        returnValueForMissingStub: _i5.Future<_i4.BaseException?>.value(),
      ) as _i5.Future<_i4.BaseException?>);
}

/// A class which mocks [TeamModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamModel extends _i1.Mock implements _i3.TeamModel {
  @override
  _i2.Team get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: _FakeTeam_3(
          this,
          Invocation.getter(#data),
        ),
        returnValueForMissingStub: _FakeTeam_3(
          this,
          Invocation.getter(#data),
        ),
      ) as _i2.Team);
  @override
  set data(_i2.Team? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  DateTime get createAt => (super.noSuchMethod(
        Invocation.getter(#createAt),
        returnValue: _FakeDateTime_4(
          this,
          Invocation.getter(#createAt),
        ),
        returnValueForMissingStub: _FakeDateTime_4(
          this,
          Invocation.getter(#createAt),
        ),
      ) as DateTime);
  @override
  int get total => (super.noSuchMethod(
        Invocation.getter(#total),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  List<_i3.SpaceModel> get workspaces => (super.noSuchMethod(
        Invocation.getter(#workspaces),
        returnValue: <_i3.SpaceModel>[],
        returnValueForMissingStub: <_i3.SpaceModel>[],
      ) as List<_i3.SpaceModel>);
  @override
  List<_i3.MemberModel> get members => (super.noSuchMethod(
        Invocation.getter(#members),
        returnValue: <_i3.MemberModel>[],
        returnValueForMissingStub: <_i3.MemberModel>[],
      ) as List<_i3.MemberModel>);
  @override
  _i3.TeamState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTeamState_5(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTeamState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.TeamState);
  @override
  set state(_i3.TeamState? _state) => super.noSuchMethod(
        Invocation.setter(
          #state,
          _state,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get msg => (super.noSuchMethod(
        Invocation.getter(#msg),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set msg(String? _msg) => super.noSuchMethod(
        Invocation.setter(
          #msg,
          _msg,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.Stream<_i3.TeamEvt> get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _i5.Stream<_i3.TeamEvt>.empty(),
        returnValueForMissingStub: _i5.Stream<_i3.TeamEvt>.empty(),
      ) as _i5.Stream<_i3.TeamEvt>);
  @override
  dynamic onActEntrance(_i3.TeamAct? act) => super.noSuchMethod(
        Invocation.method(
          #onActEntrance,
          [act],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i3.TeamEvt? evt) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [evt],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic updateTeam(_i2.Team? team) => super.noSuchMethod(
        Invocation.method(
          #updateTeam,
          [team],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.BaseException? onBeforeActEntrance(_i3.TeamAct? act) =>
      (super.noSuchMethod(
        Invocation.method(
          #onBeforeActEntrance,
          [act],
        ),
        returnValueForMissingStub: null,
      ) as _i4.BaseException?);
  @override
  _i5.Future<_i4.BaseException?> actWrapper([
    Function? action,
    int? traceLine = 1,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #actWrapper,
          [
            action,
            traceLine,
          ],
        ),
        returnValue: _i5.Future<_i4.BaseException?>.value(),
        returnValueForMissingStub: _i5.Future<_i4.BaseException?>.value(),
      ) as _i5.Future<_i4.BaseException?>);
  @override
  T? setState<T>(
    _i3.TeamState? state,
    String? m, {
    T? Function()? before,
    int? traceLine = 2,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setState,
          [
            state,
            m,
          ],
          {
            #before: before,
            #traceLine: traceLine,
          },
        ),
        returnValueForMissingStub: null,
      ) as T?);
  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i4.BaseException?> actEntrance(_i3.TeamAct? act) =>
      (super.noSuchMethod(
        Invocation.method(
          #actEntrance,
          [act],
        ),
        returnValue: _i5.Future<_i4.BaseException?>.value(),
        returnValueForMissingStub: _i5.Future<_i4.BaseException?>.value(),
      ) as _i5.Future<_i4.BaseException?>);
  @override
  void evtEntrance(_i3.TeamEvt? evt) => super.noSuchMethod(
        Invocation.method(
          #evtEntrance,
          [evt],
        ),
        returnValueForMissingStub: null,
      );
}
